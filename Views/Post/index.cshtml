@using Markdig;
<link rel="stylesheet" href="~/css/post.css" />

@{
  ViewData["Title"] = Model.Title;
  ViewData["Url"] = $"{Config.Domain}/post/{Uri.EscapeDataString(Model.Title)}";
  ViewData["Image"] = $"{Config.Domain}/post/{Uri.EscapeDataString(Model.Title)}/{Model.CoverImage}";
}

@if(!string.IsNullOrEmpty(Model.CoverImage)){
<div class="hero">
    <img class="full-screen-width" src=@(Uri.EscapeDataString(Model.Title)+"/"+Model.CoverImage) alt="Banner Image">
    <div class="hero-text">
        <h1>@Model.Title</h1>
    </div>
 </div>
}

<div class="content">
    <div class="center date">
        <h2>@Model.Title</h2>
        <p>@Model.Date?.ToString("MMM dd, yyyy")</p>
    </div>
    <button id="shareButton" class="circle">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-share-fill" viewBox="0 0 16 16">
        <path d="M11 2.5a2.5 2.5 0 1 1 .603 1.628l-6.718 3.12a2.499 2.499 0 0 1 0 1.504l6.718 3.12a2.5 2.5 0 1 1-.488.876l-6.718-3.12a2.5 2.5 0 1 1 0-3.256l6.718-3.12A2.5 2.5 0 0 1 11 2.5z"/>
        </svg>
    </button>
    <script>
        shareButton.addEventListener("click", onShare);
        async function onShare() {
            const title = document.title;
            const url = document.querySelector("link[rel=canonical]")
                ? document.querySelector("link[rel=canonical]").href
                : document.location.href;
            try {
                await navigator
                .share({
                    title,
                    url
                })
                } catch (err) { }
        }
    </script>

    @if (Config.Password != null && !User.Identity.IsAuthenticated)
    {
    <div  class="center" style="margin-bottom:8vh">
        <h1>Members only</h1>
        <p>You have to login to view the content of this page.</p>
        <button class="bnt-black" onclick="location.href='/login?ReturnUrl=/post/@Model.Title'" type="button">Login</button>
    </div>
    return;
    }

    <div>
        @{
        var pipeline = new MarkdownPipelineBuilder().UseYamlFrontMatter().UseAdvancedExtensions().Build();
        var html = Markdown.ToHtml(Model.Markdown, pipeline);
        html = html.Replace("<p><img src=\"", $"<p><img src=\"{Model.Title}/");
        html = html.Replace($"{Model.Title}/https://", "https://");
        html = html.Replace($"{Model.Title}/http://", "http://");
        }
        @Html.Raw(html)
    </div>

    <div class="center">
        <a href="#top">
            <img style="height: 3vw; margin-bottom: 10vh;" src="/icon/arrow_up.svg">
        </a>
    </div>
</div>