@using Markdig;
<link rel="stylesheet" href="~/css/post.css" />

@{
  ViewData["Title"] = Model.Title;
  ViewData["Url"] = $"{Config.Domain}/post/{Uri.EscapeDataString(Model.Title)}";
  ViewData["Image"] = $"{Config.Domain}/post/{Uri.EscapeDataString(Model.Title)}/{Model.Poster}";
}

@if(!string.IsNullOrEmpty(Model.Poster)){
<div class="hero">
    <img class="full-screen-width" src=@(Uri.EscapeDataString(Model.Title)+"/"+Model.Poster) alt="Banner Image">
    <div class="hero-text">
        <h1>@Model.Title</h1>
    </div>
 </div>
 <div class="center date">
    <p>@Model.Date?.ToString("D")</p>
 </div>
}

<button id="shareButton" class="bg-transparent border-0 top-right">
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-box-arrow-up" viewBox="0 0 16 16">
  <path fill-rule="evenodd" d="M3.5 6a.5.5 0 0 0-.5.5v8a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5v-8a.5.5 0 0 0-.5-.5h-2a.5.5 0 0 1 0-1h2A1.5 1.5 0 0 1 14 6.5v8a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 14.5v-8A1.5 1.5 0 0 1 3.5 5h2a.5.5 0 0 1 0 1h-2z"/>
  <path fill-rule="evenodd" d="M7.646.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 1.707V10.5a.5.5 0 0 1-1 0V1.707L5.354 3.854a.5.5 0 1 1-.708-.708l3-3z"/>
</svg>
</button>
<script>
    shareButton.addEventListener("click", onShare);
    async function onShare() {
        const title = document.title;
        const url = document.querySelector("link[rel=canonical]")
            ? document.querySelector("link[rel=canonical]").href
            : document.location.href;
        try {
            await navigator
            .share({
                title,
                url
            })
            } catch (err) { }
    }
</script>

@if (Config.Password != null && !User.Identity.IsAuthenticated)
{
<div  class="center" style="margin-bottom:8vh">
    <h1>Members only</h1>
    <p>You have to login to view the content of this page.</p>
    <button class="bnt-black" onclick="location.href='/login?ReturnUrl=/post/@Model.Title'" type="button">Login</button>
</div>
return;
}

<div>
    @{
     var pipeline = new MarkdownPipelineBuilder().UseYamlFrontMatter().UseAdvancedExtensions().Build();
     var html = Markdown.ToHtml(Model.Markdown, pipeline);
     html = html.Replace("<p><img src=\"", $"<p><img src=\"{Model.Title}/");
     html = html.Replace($"{Model.Title}/https://", "https://");
     html = html.Replace($"{Model.Title}/http://", "http://");
    }
    @Html.Raw(html)
</div>

<div class="center">
    <a href="#top">
        <img style="height: 3vw;" src="/icon/arrow_up.svg">
    </a>
</div>
